microservice: a microservice contain all the code required to make one feature correctly.

why microservice:
* to increase the realibility of overall system

challenges in microservice:
* data management between services

Data management:
* Each services get it's own database (if required)
* services will never ever access another services database

why database per services:
* we want services to run independently of other services
* database schema/structure change uxpectly
* some services work more efficiently w/ different types of database (NoSQL, SQL etc)

Communication stratergies between different services:
* sync: services communicates w/ each other using direct requests
* async: services communicates w/ each other using events

Event Bus: handle notification & events emmited from different services

ways of using async communicates:
1. services will be communicating w/ each other in an common space i.e Event Bus/Broker
2. any time an action has happened in an services (ex: userCreated), it will throw an event (along w/ some information) in Event Bus, and from there whichever services want that information it can save it in their own database 

Notes on 2nd method of async communicate:
Cons:
* Data duplication, paying for extra storage & database.
* harder to understand

Misc Notes:
* when designing a services, it is important to make sure what you want your services to do.

Async Communication Corner cases:

1. When event are missed by an individual microservice:
Solution: Store each events(most probably in MongoDB) received by any microservice, 
so that in time-period in which microservice missed an events(due to failure etc) it can process those lost events


Creation of different services in microservice should be based on an individual feature
 of an application 

Ways in which each microservice will authenticate the request :-
1. Each microservice will connect directly(sync request) to 
  central authentication microservice to verify whether token inside request
  is valid or not.
2. There will be authenticate gateway, where each request before sending
  to an microservice, will be authenticated.
3. Each microservice will have it's own authentication information to verify
  whether an request is valid or not.

In case if we decide to use option#3, then there is an problem of reflecting
authentication state(blocking/unblocking an user) of an user throught the different 
services. Below is the possible solution for the same:

1. After an successfull authentication, token life should be less(ex: 15 min.) in that
case if token is expired after an set interval of time then the requested service can
connect with authentication service which will notify the requested service about change
in authentication state. The drawback of this approach is that after an change in
authentication state, there will be gap of set interval of time where the token will
be active.

2. After any change in authentication state of an user, even the event that state's 
the change in authentication state, and modify each services to accept the change in
authentication state and save the updated authentication state information for a set
interval of time(probably in form of cache) as eventually an token will be expired.